{"ast":null,"code":"import _classCallCheck from \"C:\\\\Users\\\\ahlev_000\\\\Workspace\\\\FinalGroupProject\\\\client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\ahlev_000\\\\Workspace\\\\FinalGroupProject\\\\client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\ahlev_000\\\\Workspace\\\\FinalGroupProject\\\\client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\ahlev_000\\\\Workspace\\\\FinalGroupProject\\\\client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\Users\\\\ahlev_000\\\\Workspace\\\\FinalGroupProject\\\\client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"C:\\\\Users\\\\ahlev_000\\\\Workspace\\\\FinalGroupProject\\\\client\\\\src\\\\Pages\\\\Room\\\\Room.js\";\nimport React, { Component } from \"react\";\nimport Row from '../../Row';\nimport SongChoices from '../../SongChoices';\nimport ChatBox from '../../ChatBox';\nimport Container from '../../Container';\nimport Spotify from 'spotify-web-api-js';\nimport Col from '../../Col';\nimport OptionsPanel from '../../OptionsPanel';\nimport NowPlaying from '../../NowPlaying';\nimport Button from '../../Button';\nvar spotifyWebApi = new Spotify();\n\nvar Room =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Room, _Component);\n\n  function Room() {\n    var _this;\n\n    _classCallCheck(this, Room);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Room).call(this));\n\n    var params = _this.getHashParams();\n\n    _this.state = {\n      loggedIn: params.access_token ? true : false,\n      userPlaylists: [],\n      activePlaylist: [],\n      voteOptions: [],\n      nowPlaying: {\n        name: '',\n        image: ''\n      }\n    };\n\n    if (params.access_token) {\n      spotifyWebApi.setAccessToken(params.access_token);\n    }\n\n    return _this;\n  }\n\n  _createClass(Room, [{\n    key: \"getHashParams\",\n    value: function getHashParams() {\n      var hashParams = {};\n      var e,\n          r = /([^&;=]+)=?([^&;]*)/g,\n          q = window.location.hash.substring(1);\n\n      while (e = r.exec(q)) {\n        hashParams[e[1]] = decodeURIComponent(e[2]);\n      }\n\n      return hashParams;\n    }\n  }, {\n    key: \"getNowPlaying\",\n    value: function getNowPlaying() {\n      var _this2 = this;\n\n      spotifyWebApi.getMyCurrentPlaybackState().then(function (response) {\n        _this2.setState({\n          nowPlaying: {\n            name: response.item.name,\n            image: response.item.album.images[0].url\n          }\n        });\n      });\n    }\n  }, {\n    key: \"getUserPlaylists\",\n    value: function getUserPlaylists() {\n      var _this3 = this;\n\n      spotifyWebApi.getUserPlaylists().then(function (response) {\n        _this3.setState({\n          userPlaylists: response.items\n        });\n\n        console.log(\"State userPlaylists: \", _this3.state.userPlaylists); // console.log(\"SET TO STATE: \",this.setState.userPlaylists);\n      });\n    } // USE THE ID ON THE MAPPED SONGCHOICES... WHEN ONE IS CLICKED, GET ITS SONGS\n    // getPlaylistSongs(id) {\n    //     .then((response) => {\n    //         this.setState({\n    //             chosenPlaylistSongs: response.items\n    //         })\n    //     })\n    // }\n\n  }, {\n    key: \"setActive\",\n    value: function setActive() {\n      console.log(\"Clicked on playlist\"); // this.setState({\n      //     activePlaylist: this.state.activePlaylist.id;\n      // })\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this4 = this;\n\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 89\n        },\n        __self: this\n      }, React.createElement(Button, {\n        onClick: function onClick() {\n          return _this4.getUserPlaylists() + _this4.getNowPlaying();\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 90\n        },\n        __self: this\n      }, \"Check My Music\"), React.createElement(NowPlaying, {\n        name: this.state.nowPlaying.name,\n        src: this.state.nowPlaying.image,\n        style: {\n          width: 100\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 94\n        },\n        __self: this\n      }), React.createElement(Container, {\n        className: \"body-container\",\n        fluid: \"true\",\n        style: {\n          marginTop: 10\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 100\n        },\n        __self: this\n      }, React.createElement(Row, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 101\n        },\n        __self: this\n      }, React.createElement(OptionsPanel, {\n        size: \"md-12\",\n        name: \"Pick Your Master Playlist\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 102\n        },\n        __self: this\n      }, this.state.userPlaylists.map(function (playlist) {\n        return React.createElement(SongChoices, {\n          key: playlist.id,\n          name: playlist.name,\n          setActive: _this4.setActive,\n          id: playlist.id,\n          onClick: _this4.getPlaylistSongs // image = {playlist.images[2].url}\n          ,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 105\n          },\n          __self: this\n        });\n      })), React.createElement(OptionsPanel, {\n        size: \"md-12\",\n        name: \"VOTE FOR THE NEXT SONG\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 119\n        },\n        __self: this\n      }, this.state.activePlaylist.map(function (song) {\n        return React.createElement(SongChoices, {\n          key: song.id,\n          name: song.name,\n          id: song.id,\n          image: song.images[2].url,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 122\n          },\n          __self: this\n        });\n      })), React.createElement(ChatBox, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 134\n        },\n        __self: this\n      }))));\n    }\n  }]);\n\n  return Room;\n}(Component);\n\nexport default Room;","map":{"version":3,"sources":["C:\\Users\\ahlev_000\\Workspace\\FinalGroupProject\\client\\src\\Pages\\Room\\Room.js"],"names":["React","Component","Row","SongChoices","ChatBox","Container","Spotify","Col","OptionsPanel","NowPlaying","Button","spotifyWebApi","Room","params","getHashParams","state","loggedIn","access_token","userPlaylists","activePlaylist","voteOptions","nowPlaying","name","image","setAccessToken","hashParams","e","r","q","window","location","hash","substring","exec","decodeURIComponent","getMyCurrentPlaybackState","then","response","setState","item","album","images","url","getUserPlaylists","items","console","log","getNowPlaying","width","marginTop","map","playlist","id","setActive","getPlaylistSongs","song"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport Row from '../../Row';\nimport SongChoices from '../../SongChoices';\nimport ChatBox from '../../ChatBox';\nimport Container from '../../Container';\nimport Spotify from 'spotify-web-api-js';\nimport Col from '../../Col';\nimport OptionsPanel from '../../OptionsPanel';\nimport NowPlaying from '../../NowPlaying';\nimport Button from '../../Button';\n\nconst spotifyWebApi = new Spotify();\n\nclass Room extends Component {\n    constructor() {\n        super();\n        const params = this.getHashParams();\n        this.state = {\n            loggedIn: params.access_token ? true : false,\n\n            userPlaylists: [],\n            activePlaylist: [],\n            voteOptions: [],\n\n            nowPlaying: {\n                name: '',\n                image: ''\n            }\n        }\n        if (params.access_token) {\n            spotifyWebApi.setAccessToken(params.access_token)\n        }\n    }\n\n    getHashParams() {\n        var hashParams = {};\n        var e, r = /([^&;=]+)=?([^&;]*)/g,\n            q = window.location.hash.substring(1);\n        while ( e = r.exec(q)) {\n           hashParams[e[1]] = decodeURIComponent(e[2]);\n        }\n        return hashParams;\n      }\n    \n    getNowPlaying() {\n        spotifyWebApi.getMyCurrentPlaybackState()\n            .then((response) => {\n                this.setState({\n                    nowPlaying: {\n                        name: response.item.name,\n                        image: response.item.album.images[0].url\n                    }\n                })\n            })\n    }\n\n    getUserPlaylists() {\n        spotifyWebApi.getUserPlaylists()\n            .then((response) =>{\n                this.setState({\n                    userPlaylists: response.items\n                    }\n                )\n                console.log(\"State userPlaylists: \", (this.state.userPlaylists))\n                // console.log(\"SET TO STATE: \",this.setState.userPlaylists);\n            })\n    }\n\n    // USE THE ID ON THE MAPPED SONGCHOICES... WHEN ONE IS CLICKED, GET ITS SONGS\n    // getPlaylistSongs(id) {\n\n    //     .then((response) => {\n    //         this.setState({\n    //             chosenPlaylistSongs: response.items\n    //         })\n    //     })\n    // }\n\n    setActive() {\n        console.log(\"Clicked on playlist\")\n        // this.setState({\n        //     activePlaylist: this.state.activePlaylist.id;\n        // })\n        \n    }\n\n    render() {\n        return (\n            <div>\n                <Button onClick={() => this.getUserPlaylists() + this.getNowPlaying()}>\n                    Check My Music\n                </Button>\n\n                <NowPlaying \n                    name= {this.state.nowPlaying.name}\n                    src= {this.state.nowPlaying.image}\n                    style={{width:100}} \n                    />\n            \n                <Container className=\"body-container\" fluid=\"true\" style={{ marginTop: 10 }}>\n                    <Row>\n                        <OptionsPanel size=\"md-12\" name=\"Pick Your Master Playlist\">\n                            {this.state.userPlaylists.map(playlist => {\n                                return(\n                                    <SongChoices\n                                        key = {playlist.id}\n                                        name = {playlist.name}\n                                        setActive = {this.setActive}\n                                        id = {playlist.id}\n                                        onClick={this.getPlaylistSongs}\n                                        // image = {playlist.images[2].url}\n                                        >\n                                            </SongChoices>\n                                        );\n                                    })\n                                }\n                            </OptionsPanel>\n\n                            <OptionsPanel size=\"md-12\" name=\"VOTE FOR THE NEXT SONG\">\n                            {this.state.activePlaylist.map(song => {\n                                return(\n                                    <SongChoices\n                                        key = {song.id}\n                                        name = {song.name}\n                                        id = {song.id}\n                                        image = {song.images[2].url}\n                                        >\n                                     </SongChoices>\n                                        );\n                                    })\n                                }\n                            </OptionsPanel>\n\n                    <ChatBox />\n                    </Row>\n                </Container>\n\n            </div>\n                \n        );\n      }\n    }\n\nexport default Room;\n"]},"metadata":{},"sourceType":"module"}