{"ast":null,"code":"import _classCallCheck from \"C:\\\\Users\\\\abram\\\\Coding_Class\\\\Workspace-Coding\\\\FinalGroupProject\\\\client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\abram\\\\Coding_Class\\\\Workspace-Coding\\\\FinalGroupProject\\\\client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\abram\\\\Coding_Class\\\\Workspace-Coding\\\\FinalGroupProject\\\\client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\abram\\\\Coding_Class\\\\Workspace-Coding\\\\FinalGroupProject\\\\client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\Users\\\\abram\\\\Coding_Class\\\\Workspace-Coding\\\\FinalGroupProject\\\\client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"C:\\\\Users\\\\abram\\\\Coding_Class\\\\Workspace-Coding\\\\FinalGroupProject\\\\client\\\\src\\\\Pages\\\\Room\\\\Room.js\";\nimport React, { Component } from \"react\";\nimport Row from \"../../Components/Row\";\nimport SongChoices from \"../../Components/SongChoices\";\nimport Container from \"../../Components/Container\";\nimport Spotify from \"spotify-web-api-js\";\nimport OptionsPanel from \"../../Components/OptionsPanel\";\nimport NowPlaying from \"../../Components/NowPlaying\";\nimport Button from \"../../Components/Button\";\nvar spotifyWebApi = new Spotify();\n\nvar Room =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Room, _Component);\n\n  function Room() {\n    var _this;\n\n    _classCallCheck(this, Room);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Room).call(this));\n\n    var params = _this.getHashParams();\n\n    _this.state = {\n      loggedIn: params.access_token ? true : false,\n      userPlaylists: [],\n      activePlaylist: [],\n      voteOptions: [],\n      nowPlaying: {\n        name: \"\",\n        image: \"\"\n      }\n    };\n\n    if (params.access_token) {\n      spotifyWebApi.setAccessToken(params.access_token);\n    }\n\n    return _this;\n  }\n\n  _createClass(Room, [{\n    key: \"getHashParams\",\n    value: function getHashParams() {\n      var hashParams = {};\n      var e,\n          r = /([^&;=]+)=?([^&;]*)/g,\n          q = window.location.hash.substring(1);\n\n      while (e = r.exec(q)) {\n        hashParams[e[1]] = decodeURIComponent(e[2]);\n      }\n\n      return hashParams;\n    }\n  }, {\n    key: \"getNowPlaying\",\n    value: function getNowPlaying() {\n      var _this2 = this;\n\n      spotifyWebApi.getMyCurrentPlaybackState().then(function (response) {\n        _this2.setState({\n          nowPlaying: {\n            name: response.item.name,\n            image: response.item.album.images[0].url\n          }\n        });\n      });\n    }\n  }, {\n    key: \"getUserPlaylists\",\n    value: function getUserPlaylists() {\n      var _this3 = this;\n\n      spotifyWebApi.getUserPlaylists().then(function (response) {\n        _this3.setState({\n          userPlaylists: response.items\n        });\n\n        console.log(\"State userPlaylists: \", _this3.state.userPlaylists); // console.log(\"SET TO STATE: \",this.setState.userPlaylists);\n      });\n    } // USE THE ID ON THE MAPPED SONGCHOICES... WHEN ONE IS CLICKED, GET ITS SONGS\n    // getPlaylistSongs(id) {\n    //     .then((response) => {\n    //         this.setState({\n    //             chosenPlaylistSongs: response.items\n    //         })\n    //     })\n    // }\n\n  }, {\n    key: \"setActive\",\n    value: function setActive() {\n      console.log(\"Clicked on playlist\"); // this.setState({\n      //     activePlaylist: this.state.activePlaylist.id;\n      // })\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this4 = this;\n\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 84\n        },\n        __self: this\n      }, React.createElement(Button, {\n        onClick: function onClick() {\n          return _this4.getUserPlaylists() + _this4.getNowPlaying();\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 85\n        },\n        __self: this\n      }, \"Check My Music\"), React.createElement(NowPlaying, {\n        name: this.state.nowPlaying.name,\n        src: this.state.nowPlaying.image,\n        style: {\n          width: 100\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 89\n        },\n        __self: this\n      }), React.createElement(Container, {\n        className: \"body-container\",\n        fluid: \"true\",\n        style: {\n          marginTop: 10\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 95\n        },\n        __self: this\n      }, React.createElement(Row, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 100\n        },\n        __self: this\n      }, React.createElement(OptionsPanel, {\n        size: \"md-12\",\n        name: \"Pick Your Master Playlist\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 101\n        },\n        __self: this\n      }, this.state.userPlaylists.map(function (playlist) {\n        return React.createElement(SongChoices, {\n          key: playlist.id,\n          name: playlist.name,\n          setActive: _this4.setActive,\n          id: playlist.id,\n          onClick: _this4.getPlaylistSongs // image = {playlist.images[2].url}\n          ,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 104\n          },\n          __self: this\n        });\n      })), React.createElement(OptionsPanel, {\n        size: \"md-12\",\n        name: \"VOTE FOR THE NEXT SONG\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 116\n        },\n        __self: this\n      }, this.state.activePlaylist.map(function (song) {\n        return React.createElement(SongChoices, {\n          key: song.id,\n          name: song.name,\n          id: song.id,\n          image: song.images[2].url,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 119\n          },\n          __self: this\n        });\n      })), React.createElement(ChatBox, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 129\n        },\n        __self: this\n      }))));\n    }\n  }]);\n\n  return Room;\n}(Component);\n\nexport default Room;","map":{"version":3,"sources":["C:\\Users\\abram\\Coding_Class\\Workspace-Coding\\FinalGroupProject\\client\\src\\Pages\\Room\\Room.js"],"names":["React","Component","Row","SongChoices","Container","Spotify","OptionsPanel","NowPlaying","Button","spotifyWebApi","Room","params","getHashParams","state","loggedIn","access_token","userPlaylists","activePlaylist","voteOptions","nowPlaying","name","image","setAccessToken","hashParams","e","r","q","window","location","hash","substring","exec","decodeURIComponent","getMyCurrentPlaybackState","then","response","setState","item","album","images","url","getUserPlaylists","items","console","log","getNowPlaying","width","marginTop","map","playlist","id","setActive","getPlaylistSongs","song"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\r\nimport Row from \"../../Components/Row\";\r\nimport SongChoices from \"../../Components/SongChoices\";\r\nimport Container from \"../../Components/Container\";\r\nimport Spotify from \"spotify-web-api-js\";\r\nimport OptionsPanel from \"../../Components/OptionsPanel\";\r\nimport NowPlaying from \"../../Components/NowPlaying\";\r\nimport Button from \"../../Components/Button\";\r\n\r\nconst spotifyWebApi = new Spotify();\r\n\r\nclass Room extends Component {\r\n  constructor() {\r\n    super();\r\n    const params = this.getHashParams();\r\n    this.state = {\r\n      loggedIn: params.access_token ? true : false,\r\n\r\n      userPlaylists: [],\r\n      activePlaylist: [],\r\n      voteOptions: [],\r\n\r\n      nowPlaying: {\r\n        name: \"\",\r\n        image: \"\"\r\n      }\r\n    };\r\n    if (params.access_token) {\r\n      spotifyWebApi.setAccessToken(params.access_token);\r\n    }\r\n  }\r\n\r\n  getHashParams() {\r\n    var hashParams = {};\r\n    var e,\r\n      r = /([^&;=]+)=?([^&;]*)/g,\r\n      q = window.location.hash.substring(1);\r\n    while ((e = r.exec(q))) {\r\n      hashParams[e[1]] = decodeURIComponent(e[2]);\r\n    }\r\n    return hashParams;\r\n  }\r\n\r\n  getNowPlaying() {\r\n    spotifyWebApi.getMyCurrentPlaybackState().then(response => {\r\n      this.setState({\r\n        nowPlaying: {\r\n          name: response.item.name,\r\n          image: response.item.album.images[0].url\r\n        }\r\n      });\r\n    });\r\n  }\r\n\r\n  getUserPlaylists() {\r\n    spotifyWebApi.getUserPlaylists().then(response => {\r\n      this.setState({\r\n        userPlaylists: response.items\r\n      });\r\n      console.log(\"State userPlaylists: \", this.state.userPlaylists);\r\n      // console.log(\"SET TO STATE: \",this.setState.userPlaylists);\r\n    });\r\n  }\r\n\r\n  // USE THE ID ON THE MAPPED SONGCHOICES... WHEN ONE IS CLICKED, GET ITS SONGS\r\n  // getPlaylistSongs(id) {\r\n\r\n  //     .then((response) => {\r\n  //         this.setState({\r\n  //             chosenPlaylistSongs: response.items\r\n  //         })\r\n  //     })\r\n  // }\r\n\r\n  setActive() {\r\n    console.log(\"Clicked on playlist\");\r\n    // this.setState({\r\n    //     activePlaylist: this.state.activePlaylist.id;\r\n    // })\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <Button onClick={() => this.getUserPlaylists() + this.getNowPlaying()}>\r\n          Check My Music\r\n        </Button>\r\n\r\n        <NowPlaying\r\n          name={this.state.nowPlaying.name}\r\n          src={this.state.nowPlaying.image}\r\n          style={{ width: 100 }}\r\n        />\r\n\r\n        <Container\r\n          className=\"body-container\"\r\n          fluid=\"true\"\r\n          style={{ marginTop: 10 }}\r\n        >\r\n          <Row>\r\n            <OptionsPanel size=\"md-12\" name=\"Pick Your Master Playlist\">\r\n              {this.state.userPlaylists.map(playlist => {\r\n                return (\r\n                  <SongChoices\r\n                    key={playlist.id}\r\n                    name={playlist.name}\r\n                    setActive={this.setActive}\r\n                    id={playlist.id}\r\n                    onClick={this.getPlaylistSongs}\r\n                    // image = {playlist.images[2].url}\r\n                  />\r\n                );\r\n              })}\r\n            </OptionsPanel>\r\n\r\n            <OptionsPanel size=\"md-12\" name=\"VOTE FOR THE NEXT SONG\">\r\n              {this.state.activePlaylist.map(song => {\r\n                return (\r\n                  <SongChoices\r\n                    key={song.id}\r\n                    name={song.name}\r\n                    id={song.id}\r\n                    image={song.images[2].url}\r\n                  />\r\n                );\r\n              })}\r\n            </OptionsPanel>\r\n\r\n            <ChatBox />\r\n          </Row>\r\n        </Container>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Room;\r\n"]},"metadata":{},"sourceType":"module"}